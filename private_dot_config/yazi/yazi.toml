# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[manager]
ratio          = [ 1, 3, 4 ]
sort_by        = "natural"
sort_sensitive = false
sort_reverse   = false
sort_dir_first = true
sort_translit  = false
linemode       = "size"
show_hidden    = false
show_symlink   = true
scrolloff      = 5
mouse_events   = [ "click", "scroll" ]
title_format   = "yazi:{cwd}"

[preview]
wrap            = "no"
tab_size        = 2
max_width       = 950
max_height      = 900
cache_dir       = "/home/blale/.cache/yazi"
image_delay     = 30
image_filter    = "triangle"
image_quality   = 75
sixel_fraction  = 15
ueberzug_scale  = 1
ueberzug_offset = [ 0, 0, 0, 0 ]

[opener]
edit = [
	{ run = '${EDITOR:=vi} "$@"', desc = "$EDITOR", block = true, for = "unix" },
	{ run = 'vim "$@"', desc = "vim", block = true, for = "unix" },
	{ run = 'nano "$@"', desc = "nano", block = true, for = "unix" },
]
open = [
	{ run = 'xdg-open "$@"', orphan = true, desc = "Open", for = "linux" },
]
reveal = [
	{ run = 'exiftool "$1" | less', block = true, desc = "Show EXIF", for = "unix" },
	{ run = 'mediainfo "$1" | less', block = true, desc = "Show media info", for = "unix" },
	{ run = '''file --brief "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show file info", for = "unix" },
	{ run = 'xdg-open "$(dirname "$0")"', desc = "Reveal", for = "linux" },
]
none = [
    { run = 'echo "$@"', block = true, for = "unix" },
]

# Archive files
tar_x = [
	{ run = 'tar vvtf "$1" | less', desc = "List archive", block = true, for = "unix" },
	{ run = 'tar xf "$1"', desc = "Extract here", for = "unix" },
]
zip_x = [
	{ run = 'unzip -l "$1" | less', desc = "List archive", block = true, for = "unix" },
	{ run = 'unzip "$1"', desc = "Extract here", for = "unix" },
]
7z_x = [
	{ run = '7z -p l "$1" | less', desc = "List archive", block = true, for = "unix" },
	{ run = '7z x "$1"', desc = "Extract here", for = "unix" },
]
unar_x = [
	{ run = 'unar l "$1" | less', desc = "List archive", block = true, for = "unix" },
	{ run = 'unar "$1"', desc = "Extract here", for = "unix" },
]

# Image files
image_x = [
    { run = 'feh --start-at "$@"', orphan = true, for = "unix" },
    { run = 'gwenview "$@"', orphan = true, for = "unix" },
]
gif_x = [
    { run = 'gwenview "$@"', orphan = true, for = "unix" },
    { run = 'feh --start-at "$@"', orphan = true, for = "unix" },
]

# Audio files
audio_x = [
	{ run = 'mpv --volume=80 --loop-file=yes --audio-display=no "$@"', block = true, for = "unix" },
]

# Video files
video_x = [
	{ run = 'mpv --volume=80 --loop-file=yes --fullscreen=no "$@"', orphan = true, for = "unix" },
]

# Document files
pdf_x = [
	{ run = 'firefox "$@"', orphan = true, for = "unix" },
]

[open]
rules = [
	{ mime = "text/*",              use = [ "edit", "open", "reveal" ] },
	{ mime = "*/javascript",        use = [ "edit", "open", "reveal" ] },
	{ mime = "inode/x-empty",       use = [ "edit", "open", "reveal" ] },
	{ mime = "application/json",    use = [ "edit", "open", "reveal" ] },

	{ mime = "image/gif",               use = [ "gif_x",   "reveal" ] },
	{ mime = "image/{jpeg,png,webp}",   use = [ "image_x", "reveal" ] },
	{ mime = "image/*",                 use = [ "image_x", "reveal" ] },
	{ mime = "audio/*",                 use = [ "audio_x", "reveal", "open" ] },
	{ mime = "video/*",                 use = [ "video_x", "reveal", "open" ] },

	{ mime = "application/gzip",                               use = [ "tar_x",  "open", "reveal" ] },
	{ mime = "application/x-{tar,bzip*,xz}",                   use = [ "tar_x",  "open", "reveal" ] },
	{ mime = "application/zip",                                use = [ "zip_x",  "open", "reveal" ] },
	{ mime = "application/x-7z-compressed",                    use = [ "7z_x",   "open", "reveal" ] },
	{ mime = "application/x-rar",                              use = [ "unar_x", "open", "reveal" ] },
	{ mime = "application/pdf",                                use = [ "pdf_x",  "open", "reveal" ] },
	{ mime = "application/vnd.openxmlformats-officedocument*", use = [           "open", "reveal" ] },
    
    # { mime = "inode/directory",         use = [ "none" ] },
    # { mime = "application/*executable", use = [ "none" ] },
    
    { mime = "*", use = [ "none", "open", "reveal" ] },
]

[tasks]
micro_workers    = 10
macro_workers    = 25
bizarre_retry    = 5
image_alloc      = 536870912  # 512MB
image_bound      = [ 0, 0 ]
suppress_preload = false

[plugin]

fetchers = [
	# Mimetype
	{ id = "mime", name = "*", run = "mime", if = "!mime", prio = "high" },
]
preloaders = [
	# Image
	# { mime = "image/{avif,heic,jxl,svg+xml}", run = "magick" },
	{ mime = "image/{avif,heic,jxl,svg+xml}", run = "convert" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/vnd.ms-opentype", run = "font" },
]
previewers = [
	{ name = "*/", run = "folder", sync = true },
	# Code
	{ mime = "text/*", run = "code" },
	{ mime = "*/{xml,javascript,x-wine-extension-ini}", run = "code" },
	# JSON
	{ mime = "application/{json,x-ndjson}", run = "json" },
	# Image
	# { mime = "image/{avif,heic,jxl,svg+xml}", run = "magick" },
	{ mime = "image/{avif,heic,jxl,svg+xml}", run = "convert" },
	{ mime = "image/*", run = "image" },
	# Audio
    { mime = "audio/*", run = "mediainfo"},
    # Video
	{ mime = "video/*", run = "video" },
    # PDF
	{ mime = "application/pdf", run = "pdf" },
	# Archive
	{ mime = "application/{,g}zip", run = "archive" },
	{ mime = "application/x-{tar,bzip*,7z-compressed,xz,rar,iso9660-image}", run = "archive" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/vnd.ms-opentype", run = "font" },
	# Fallback
	{ name = "*", run = "file" },
]

[input]
cursor_blink = true

# cd
cd_title  = "Change directory:"
cd_origin = "center"
cd_offset = [ -25, -5, 50, 3 ]

# create
# create_title  = ["Create:", "Create (dir):"]
create_title  = "Create:"
create_origin = "center"
create_offset = [ -25, -5, 50, 3 ]

# rename
rename_title  = "Rename:"
rename_origin = "hovered"
rename_offset = [ 0, 1, 50, 3 ]

# trash
trash_title 	= "Move {n} selected file{s} to trash? (y/N)"
trash_origin	= "center"
trash_offset	= [ -25, -5, 50, 3 ]

# delete
delete_title 	= "Delete {n} selected file{s} permanently? (y/N)"
delete_origin	= "center"
delete_offset	= [ -25, -5, 50, 3 ]

# filter
filter_title  = "Filter:"
filter_origin = "center"
filter_offset = [ -25, -5, 50, 3 ]

# find
find_title  = [ "Find next:", "Find previous:" ]
find_origin = "center"
find_offset = [ -25, -5, 50, 3 ]

# search
search_title  = "Search via {n}:"
search_origin = "center"
search_offset = [ -25, -5, 50, 3 ]

# shell
shell_title  = [ "Shell:", "Shell (block):" ]
shell_origin = "center"
shell_offset = [ -25, -5, 50, 3 ]

# overwrite
overwrite_title  = "Overwrite an existing file? (y/N)"
overwrite_origin = "center"
overwrite_offset = [ -25, -5, 50, 3 ]

# quit
quit_title  = "{n} task{s} running, sure to quit? (y/N)"
quit_origin = "center"
quit_offset = [ -25, -5, 50, 3 ]

[select]
open_title  = "Open with:"
open_origin = "hovered"
open_offset = [ 0, 1, 50, 10 ]

[which]
sort_by      	 = "none"
sort_sensitive = false
sort_reverse 	 = false
sort_translit  = false

[log]
enabled = false
