# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/keymap.json"

[manager]

keymap = [
	{ on = "<Esc>", run = "escape",             desc = "Exit visual mode, clear selected, or cancel search" },
	{ on = "<C-c>", run = "escape",             desc = "Exit visual mode, clear selected, or cancel search" },
	{ on = "q",     run = "quit",               desc = "Exit the process" },
	{ on = "Q",     run = "quit --no-cwd-file", desc = "Exit the process without writing cwd-file" },
	{ on = "<C-q>", run = "close",              desc = "Close the current tab, or quit if it is last tab" },
	{ on = "<C-z>", run = "suspend",            desc = "Suspend the process" },

	# Hopping
	# { on = "k", run = "arrow -1", desc = "Move cursor up" },
	# { on = "j", run = "arrow 1",  desc = "Move cursor down" },

	# { on = "<Up>",    run = "arrow -1", desc = "Move cursor up" },
	# { on = "<Down>",  run = "arrow 1",  desc = "Move cursor down" },

	{ on = "<C-u>", run = "arrow -50%",  desc = "Move cursor up half page" },
	{ on = "<C-d>", run = "arrow 50%",   desc = "Move cursor down half page" },
	{ on = "<C-b>", run = "arrow -100%", desc = "Move cursor up one page" },
	{ on = "<C-f>", run = "arrow 100%",  desc = "Move cursor down one page" },

	{ on = "<S-PageUp>",   run = "arrow -50%",  desc = "Move cursor up half page" },
	{ on = "<S-PageDown>", run = "arrow 50%",   desc = "Move cursor down half page" },
	{ on = "<PageUp>",     run = "arrow -100%", desc = "Move cursor up one page" },
	{ on = "<PageDown>",   run = "arrow 100%",  desc = "Move cursor down one page" },

	{ on = [ "g", "g" ], run = "arrow -99999999", desc = "Move cursor to the top" },
	{ on = "G",          run = "arrow 99999999",  desc = "Move cursor to the bottom" },

	# Navigation
	{ on = "h", run = "leave", desc = "Go back to the parent directory" },
	# { on = "l", run = "enter", desc = "Enter the child directory" },

	{ on = "<Left>",  run = "leave",    desc = "Go back to the parent directory" },
	# { on = "<Right>", run = "enter",    desc = "Enter the child directory" },

	{ on = "H", run = "back",    desc = "Go back to the previous directory" },
	{ on = "L", run = "forward", desc = "Go forward to the next directory" },

	# Seeking
	{ on = "K", run = "seek -5", desc = "Seek up 5 units in the preview" },
	{ on = "J", run = "seek 5",  desc = "Seek down 5 units in the preview" },

	# Selection
	{ on = "<Space>",       run = [ "select --state=none", "arrow 1" ], desc = "Toggle the current selection state" },
	{ on = "V",             run = "visual_mode",                        desc = "Enter visual mode (selection mode)" },
	{ on = [ "u", "V" ],    run = "visual_mode --unset",                desc = "Enter visual mode (unset mode)" },
	{ on = "<C-a>",         run = "select_all --state=true",            desc = "Select all files" },
	{ on = "v",             run = "select_all --state=none",            desc = "Inverse selection of all files" },

	# Operation
	# { on = "r",             run = "open",                        desc = "Open selected files" },
	{ on = "r",             run = "open --interactive",          desc = "Open selected files interactively" },
	# { on = "<Enter>",       run = "open",                        desc = "Open selected files" },
	# { on = "<S-Enter>",     run = "open --interactive",          desc = "Open selected files interactively" },
	{ on = ["y", "y"],      run = "yank",                        desc = "Yank selected files (copy)" },
	{ on = ["d", "d"],      run = "yank --cut",                  desc = "Yank selected files (cut)" },
	{ on = ["p", "p"],      run = "paste",                       desc = "Paste yanked files" },
	{ on = ["p", "o"],      run = "paste --force",               desc = "Paste yanked files (overwrite if the destination exists)" },
	{ on = ["p", "l"],      run = "link --force",                desc = "Symlink the absolute path of yanked files" },
	{ on = ["p", "L"],      run = "link --force --relative",     desc = "Symlink the relative path of yanked files" },
	{ on = ["p", "h"],      run = "hardlink",                    desc = "Hardlink the yanked files" },
	{ on = ["u", "y"],      run = "unyank",                      desc = "Cancel the yank status" },
	{ on = ["d", "T"],      run = "remove",                      desc = "Trash selected files" },
	{ on = ["d", "D"],      run = "remove --permanently",        desc = "Permanently delete selected files" },
	{ on = ["c", "n"],      run = "create --dir",                desc = "Create a directory"},
	{ on = ["c", "t"],      run = "create",                      desc = "Create a file" },
	{ on = "a",             run = "rename --cursor=before_ext",  desc = "Rename selected file(s)" },
	{ on = "A",             run = "rename",                      desc = "Rename selected file(s)" },
	{ on = "I",             run = "rename --cursor=start",       desc = "Rename selected file(s)" },
	{ on = ["c", "w"],      run = "rename --empty=all",          desc = "Rename selected file(s)" },
	{ on = ["b", "r"],      run = "rename --empty=all",          desc = "Rename selected file(s)" },
	{ on = ";",             run = "shell --interactive",         desc = "Run a shell command" },
	{ on = "!",             run = "shell --block --interactive", desc = "Run a shell command (block until finishes)" },
	{ on = ":",             run = "shell --block --interactive", desc = "Run a shell command (block until finishes)" },
	{ on = ".",             run = "hidden toggle",               desc = "Toggle the visibility of hidden files" },
	{ on = "<Backspace>",   run = "hidden toggle",               desc = "Toggle the visibility of hidden files" },
	{ on = ["c", "f"],      run = "search fd",                   desc = "Search files by name using fd" },
	{ on = ["c", "r"],      run = "search rg",                   desc = "Search files by content using ripgrep" },
	{ on = "<C-c>",         run = "search none",                 desc = "Cancel the ongoing search" },
	{ on = ["c", "z"],      run = "plugin zoxide",               desc = "Jump to a directory using zoxide" },
	# { on = ["c", "f"],      run = "plugin fzf",                  desc = "Jump to a directory or reveal a file using fzf" },

	# Linemode
	{ on = [ "m", "s" ], run = "linemode size",        desc = "Set linemode to size" },
	{ on = [ "m", "p" ], run = "linemode permissions", desc = "Set linemode to permissions" },
	{ on = [ "m", "c" ], run = "linemode ctime",       desc = "Set linemode to ctime" },
	{ on = [ "m", "m" ], run = "linemode mtime",       desc = "Set linemode to mtime" },
	{ on = [ "m", "o" ], run = "linemode owner",       desc = "Set linemode to owner" },
	{ on = [ "m", "n" ], run = "linemode none",        desc = "Set linemode to none" },

	# Copy
	{ on = [ "y", "p" ], run = "copy path",             desc = "Copy the file path" },
	{ on = [ "y", "d" ], run = "copy dirname",          desc = "Copy the directory path" },
	{ on = [ "y", "n" ], run = "copy filename",         desc = "Copy the filename" },
	{ on = [ "y", "." ], run = "copy name_without_ext", desc = "Copy the filename without extension" },

	# Filter
	{ on = ["z", "z"],   run = "filter --smart", desc = "Filter files" },

	# Find
	{ on = "/", run = "find --smart",            desc = "Find next file" },
	{ on = "f", run = "find --smart",            desc = "Find next file" },
	{ on = "?", run = "find --previous --smart", desc = "Find previous file" },
	{ on = "n", run = "find_arrow",              desc = "Go to the next found" },
	{ on = "N", run = "find_arrow --previous",   desc = "Go to the previous found" },

	# Sorting
	{ on = [ "o", "m" ], run = [ "sort modified --reverse=no", "linemode mtime" ], desc = "Sort by modified time" },
	{ on = [ "o", "M" ], run = [ "sort modified --reverse", "linemode mtime" ],    desc = "Sort by modified time (reverse)" },
	{ on = [ "o", "c" ], run = [ "sort created --reverse=no", "linemode ctime" ],  desc = "Sort by created time" },
	{ on = [ "o", "C" ], run = [ "sort created --reverse", "linemode ctime" ],     desc = "Sort by created time (reverse)" },
	{ on = [ "o", "e" ], run = "sort extension --reverse=no",                      desc = "Sort by extension" },
	{ on = [ "o", "E" ], run = "sort extension --reverse",                         desc = "Sort by extension (reverse)" },
	{ on = [ "o", "a" ], run = "sort alphabetical --reverse=no",                   desc = "Sort alphabetically" },
	{ on = [ "o", "A" ], run = "sort alphabetical --reverse",                      desc = "Sort alphabetically (reverse)" },
	{ on = [ "o", "n" ], run = "sort natural --reverse=no",                        desc = "Sort naturally" },
	{ on = [ "o", "N" ], run = "sort natural --reverse",                           desc = "Sort naturally (reverse)" },
	{ on = [ "o", "s" ], run = [ "sort size --reverse", "linemode size" ],         desc = "Sort by size (reverse)" },
	{ on = [ "o", "S" ], run = [ "sort size --reverse=no", "linemode size" ],      desc = "Sort by size" },
	{ on = [ "o", "r" ], run = "sort random --reverse=no",                         desc = "Sort randomly" },

	# Goto
	{ on = [ "g", "b" ],       run = "cd /boot",                            desc = "Go to the /boot directory" },
	{ on = [ "g", "B" ],       run = "cd ~/.config/bspwm",                  desc = "Go to the bspwm config directory" },
	{ on = [ "g", "c" ],       run = "cd ~/.config",                        desc = "Go to the ~/.config directory" },
	{ on = [ "g", "C" ],       run = "cd ~/.cache",                         desc = "Go to the ~/.cache directory" },
	{ on = [ "g", "D" ],       run = "cd ~/downloads",                      desc = "Go to the ~/downloads directory" },
	{ on = [ "g", "e" ],       run = "cd /etc",                             desc = "Go to the /etc directory" },
	{ on = [ "g", "h" ],       run = "cd ~",                                desc = "Go to the home directory" },
	{ on = [ "g", "l" ],       run = "cd ~/.local",                         desc = "Go to the ~/.local directory" },
	{ on = [ "g", "L" ],       run = "cd ~/.local/share",                   desc = "Go to the ~/.local/share directory" },
	{ on = [ "g", "m" ],       run = "cd /run/media",                       desc = "Go to the /run/media directory" },
	{ on = [ "g", "M" ],       run = "cd ~/music",                          desc = "Go to the ~/music directory" },
	{ on = [ "g", "o" ],       run = "cd /opt",                             desc = "Go to the /opt directory" },
	{ on = [ "g", "t" ],       run = "cd /tmp",                             desc = "Go to the /tmp directory" },
	{ on = [ "g", "T" ],       run = "cd ~/templates",                      desc = "Go to the ~/templates directory" },
	{ on = [ "g", "r" ],       run = "cd /",                                desc = "Go to the root directory" },
	{ on = [ "g", "p" ],       run = "cd /var/log",                         desc = "Go to the /var/log directory" },
	{ on = [ "g", "u" ],       run = "cd /usr",                             desc = "Go to the /usr directory" },
	{ on = [ "g", "v" ],       run = "cd /var",                             desc = "Go to the /var directory" },
	{ on = [ "g", "V" ],       run = "cd ~/.var",                           desc = "Go to the ~/.var directory" },
    { on = [ "g", "/" ],       run = "cd /",                                desc = "Go to the root directory" },
	{ on = [ "g", "?" ],       run = "cd ~/.config/yazi",                   desc = "Go to the yazi config directory" },
	{ on = [ "g", "<Space>" ], run = "cd --interactive",                    desc = "Go to a directory interactively" },
	{ on = [ "c", "d" ],       run = "cd --interactive",                    desc = "Go to a directory interactively" },

	# Tabs
	{ on = "<C-t>", run = "tab_create --current", desc = "Create a new tab with CWD" },

	{ on = "1", run = "tab_switch 0", desc = "Switch to the first tab" },
	{ on = "2", run = "tab_switch 1", desc = "Switch to the second tab" },
	{ on = "3", run = "tab_switch 2", desc = "Switch to the third tab" },
	{ on = "4", run = "tab_switch 3", desc = "Switch to the fourth tab" },
	{ on = "5", run = "tab_switch 4", desc = "Switch to the fifth tab" },
	{ on = "6", run = "tab_switch 5", desc = "Switch to the sixth tab" },
	{ on = "7", run = "tab_switch 6", desc = "Switch to the seventh tab" },
	{ on = "8", run = "tab_switch 7", desc = "Switch to the eighth tab" },
	{ on = "9", run = "tab_switch 8", desc = "Switch to the ninth tab" },

	{ on = "[",     run = "tab_switch -1 --relative", desc = "Switch to the previous tab" },
	{ on = "<Tab>", run = "tab_switch 1 --relative",  desc = "Switch to the previous tab" },
	{ on = "]",     run = "tab_switch 1 --relative",  desc = "Switch to the next tab" },

	{ on = "{", run = "tab_swap -1", desc = "Swap current tab with previous tab" },
	{ on = "}", run = "tab_swap 1",  desc = "Swap current tab with next tab" },

	# Tasks
	{ on = "w", run = "tasks_show", desc = "Show task manager" },

    # Archiving
    # { on = [ "b", "c" ], run = """shell 'zip czf .tar.gz "$@"' --interactive --cursor=7""", desc = "Compress selected files" },

	# Help
	{ on = "~",    run = "help", desc = "Open help" },
	{ on = "<F1>", run = "help", desc = "Open help" },
]

[tasks]

keymap = [
	{ on = "<Esc>", run = "close", desc = "Close task manager" },
	{ on = "<C-[>", run = "close", desc = "Close task manager" },
	{ on = "<C-c>", run = "close", desc = "Close task manager" },
	{ on = "w",     run = "close", desc = "Close task manager" },

	{ on = "k", run = "arrow -1", desc = "Move cursor up" },
	{ on = "j", run = "arrow 1",  desc = "Move cursor down" },

	{ on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
	{ on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

	{ on = "<Enter>", run = "inspect", desc = "Inspect the task" },
	{ on = "x",       run = "cancel",  desc = "Cancel the task" },

	# Help
	{ on = "~",    run = "help", desc = "Open help" },
	{ on = "<F1>", run = "help", desc = "Open help" },
]

[select]

keymap = [
	{ on = "<Esc>",   run = "close",          desc = "Cancel selection" },
	{ on = "<C-[>",   run = "close",          desc = "Cancel selection" },
	{ on = "<C-c>",   run = "close",          desc = "Cancel selection" },
	{ on = "<Enter>", run = "close --submit", desc = "Submit the selection" },

	{ on = "k", run = "arrow -1", desc = "Move cursor up" },
	{ on = "j", run = "arrow 1",  desc = "Move cursor down" },

	{ on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
	{ on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

	# Help
	{ on = "~",    run = "help", desc = "Open help" },
	{ on = "<F1>", run = "help", desc = "Open help" },
]

[input]

keymap = [
	{ on = "<C-c>",   run = "close",          desc = "Cancel input" },
	{ on = "<Enter>", run = "close --submit", desc = "Submit the input" },
	{ on = "<Esc>",   run = "escape",         desc = "Go back the normal mode, or cancel input" },
	{ on = "<C-[>",   run = "escape",         desc = "Go back the normal mode, or cancel input" },

	# Mode
	{ on = "i", run = "insert",                              desc = "Enter insert mode" },
	{ on = "a", run = "insert --append",                     desc = "Enter append mode" },
	{ on = "I", run = [ "move -999", "insert" ],             desc = "Move to the BOL, and enter insert mode" },
	{ on = "A", run = [ "move 999", "insert --append" ],     desc = "Move to the EOL, and enter append mode" },
	{ on = "v", run = "visual",                              desc = "Enter visual mode" },
	{ on = "V", run = [ "move -999", "visual", "move 999" ], desc = "Enter visual mode and select all" },

	# Character-wise movement
	{ on = "h",       run = "move -1", desc = "Move back a character" },
	{ on = "l",       run = "move 1",  desc = "Move forward a character" },
	{ on = "<Left>",  run = "move -1", desc = "Move back a character" },
	{ on = "<Right>", run = "move 1",  desc = "Move forward a character" },
	{ on = "<C-b>",   run = "move -1", desc = "Move back a character" },
	{ on = "<C-f>",   run = "move 1",  desc = "Move forward a character" },

	# Word-wise movement
	{ on = "b",     run = "backward",              desc = "Move back to the start of the current or previous word" },
	{ on = "w",     run = "forward",               desc = "Move forward to the start of the next word" },
	{ on = "e",     run = "forward --end-of-word", desc = "Move forward to the end of the current or next word" },
	{ on = "<A-b>", run = "backward",              desc = "Move back to the start of the current or previous word" },
	{ on = "<A-f>", run = "forward --end-of-word", desc = "Move forward to the end of the current or next word" },

	# Line-wise movement
	{ on = "0",      run = "move -999", desc = "Move to the BOL" },
	{ on = "$",      run = "move 999",  desc = "Move to the EOL" },
	{ on = "<C-a>",  run = "move -999", desc = "Move to the BOL" },
	{ on = "<C-e>",  run = "move 999",  desc = "Move to the EOL" },
	{ on = "<Home>", run = "move -999", desc = "Move to the BOL" },
	{ on = "<End>",  run = "move 999",  desc = "Move to the EOL" },

	# Delete
	{ on = "<Backspace>", run = "backspace",	        desc = "Delete the character before the cursor" },
	{ on = "<Delete>",    run = "backspace --under", desc = "Delete the character under the cursor" },
	{ on = "<C-h>",       run = "backspace",         desc = "Delete the character before the cursor" },
	{ on = "<C-d>",       run = "backspace --under", desc = "Delete the character under the cursor" },

	# Kill
	{ on = "<C-u>", run = "kill bol",      desc = "Kill backwards to the BOL" },
	{ on = "<C-k>", run = "kill eol",      desc = "Kill forwards to the EOL" },
	{ on = "<C-w>", run = "kill backward", desc = "Kill backwards to the start of the current word" },
	{ on = "<A-d>", run = "kill forward",  desc = "Kill forwards to the end of the current word" },

	# Cut/Yank/Paste
	{ on = "d", run = "delete --cut",                              desc = "Cut the selected characters" },
	{ on = "D", run = [ "delete --cut", "move 999" ],              desc = "Cut until the EOL" },
	{ on = "c", run = "delete --cut --insert",                     desc = "Cut the selected characters, and enter insert mode" },
	{ on = "C", run = [ "delete --cut --insert", "move 999" ],     desc = "Cut until the EOL, and enter insert mode" },
	{ on = "x", run = [ "delete --cut", "move 1 --in-operating" ], desc = "Cut the current character" },
	{ on = "y", run = "yank",           desc = "Copy the selected characters" },
	{ on = "p", run = "paste",          desc = "Paste the copied characters after the cursor" },
	{ on = "P", run = "paste --before", desc = "Paste the copied characters before the cursor" },

	# Undo/Redo
	{ on = "u",     run = "undo", desc = "Undo the last operation" },
	{ on = "<C-r>", run = "redo", desc = "Redo the last operation" },

	# Help
	{ on = "~",    run = "help", desc = "Open help" },
	{ on = "<F1>", run = "help", desc = "Open help" },
]

[completion]

keymap = [
	{ on = "<C-c>",   run = "close",                                      desc = "Cancel completion" },
	{ on = "<Tab>",   run = "close --submit",                             desc = "Submit the completion" },
	{ on = "<Enter>", run = [ "close --submit", "close_input --submit" ], desc = "Submit the completion and input" },

	{ on = "<A-k>", run = "arrow -1", desc = "Move cursor up" },
	{ on = "<A-j>", run = "arrow 1",  desc = "Move cursor down" },

	{ on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
	{ on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

	{ on = "<C-p>", run = "arrow -1", desc = "Move cursor up" },
	{ on = "<C-n>", run = "arrow 1",  desc = "Move cursor down" },

	# Help
	{ on = "~",    run = "help", desc = "Open help" },
	{ on = "<F1>", run = "help", desc = "Open help" },
]

[help]

keymap = [
	{ on = "<Esc>", run = "escape", desc = "Clear the filter, or hide the help" },
	{ on = "<C-[>", run = "escape", desc = "Clear the filter, or hide the help" },
	{ on = "q",     run = "close",  desc = "Exit the process" },
	{ on = "<C-c>", run = "close",  desc = "Hide the help" },

	# Navigation
	{ on = "k", run = "arrow -1", desc = "Move cursor up" },
	{ on = "j", run = "arrow 1",  desc = "Move cursor down" },

	{ on = "<Up>",   run = "arrow -1", desc = "Move cursor up" },
	{ on = "<Down>", run = "arrow 1",  desc = "Move cursor down" },

	# Filtering
	{ on = "/", run = "filter", desc = "Apply a filter for the help items" },
]

# Chmod (chmod.yazi plugin)
[[manager.prepend_keymap]]
on   = "+"
run  = "plugin chmod"
desc = "Chmod on selected files"

[[manager.prepend_keymap]]
on   = "-"
run  = "plugin chmod"
desc = "Chmod on selected files"

# Smart enter (smart-enter.yazi plugin)
[[manager.prepend_keymap]]
on   = "l"
run  = "plugin --sync smart-enter"
desc = "Enter the child directory, or open the file"

[[manager.prepend_keymap]]
on   = "<Right>"
run  = "plugin --sync smart-enter"
desc = "Enter the child directory, or open the file"

[[manager.prepend_keymap]]
on   = "<Enter>"
run  = "plugin --sync smart-enter"
desc = "Enter the child directory, or open the file"


# File navigation wraparound (arrow.yazi plugin)
[[manager.prepend_keymap]]
on  = "k"
run = "plugin --sync arrow --args=-1"

[[manager.prepend_keymap]]
on  = "j"
run = "plugin --sync arrow --args=1"

[[manager.prepend_keymap]]
on  = "<Up>"
run = "plugin --sync arrow --args=-1"

[[manager.prepend_keymap]]
on  = "<Down>"
run = "plugin --sync arrow --args=1"


# Hide preview pane
[[manager.prepend_keymap]]
on   = [ "z", "i" ]
run  = "plugin --sync hide-preview"
desc = "Hide or show preview"


# Maximize preview pane
[[manager.prepend_keymap]]
on   = "i"
run  = "plugin --sync max-preview"
desc = "Maximize or restore preview"


# Drag and Drop
[[manager.prepend_keymap]]
on  = [ "b", "d" ]
run = '''
	shell 'dragon-drop -x "$1"' --confirm --orphan
'''
desc = "Drag and Drop via dragon"
